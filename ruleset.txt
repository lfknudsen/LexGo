/* This is a block comment. You can also begin a line-comment with #.
 In order to keep the regular expressions delimited, comments cannot be preceded
 by anything but whitespace on their (first) line.

 Each line below is a separate rule.
 The format is <name><whitespace><regexp>.
 The actual regular expression used to read rulesets is in Expressions/ReadRuleset.txt.
 Note that Go (and therefore this programme) uses Google's RE2 engine, which is
 slightly limited in functionality in order to maintain O(n) time complexity;
 This means look-back and look-ahead is _not_ possible.

 Rules have higher priority than ones listed below them. If two rules would
 theoretically match the same text, whichever one is highest will be selected. */
PKG                     package
TYPE                    type
STRUCT                  struct
/* This is a multi-line comment :)
The strings below look complex, and that's because they are.
Without negative lookbehind, they have to be :( */
STRING                  "(?:(?:(?:(?:\\")|[^"])|\s)*[^\\])?"
STRING_SINGLE           '(?:(?:(?:(?:\\')|[^'])|\s)*[^\\])?'
STRING_BACK             `(?:(?:(?:(?:\\`)|[^`])|\s)*[^\\])?`
IDENT                   \p{L}+
INTEGER                 \d+
FLOAT                   \d+(\.\d+)?
# Remember to escape special symbols if you mean to use them as characters!
LPAREN                  \(
RPAREN                  \)
LBRace                  {
RBRACE                  }
LBRACKET                \[
RBRACKET                \]
OP_PLUS                 \+
OP_MINUS                \-
OP_MUL                  \*
OP_DIV                  \/
OP_EQ                   \=
OP_DEQ                  \=\=
COMMENT_LINE_START      \#
COMMENT_BLOCK_START     \/\*
/* Some characters can be problematic, and do not follow normal rules of escaping with
 a backslash. You can enclose them in brackets instead. */
COMMENT_BLOCK_END       [*][/]
/* ?: instead of a name means the regex will not be captured, meaning no token will
 be created based on it. The regex output of the following will be (?:\s+) */
?:                      \s+
MISTAKE                 .+